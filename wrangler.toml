#:schema node_modules/wrangler/config-schema.json
name = "wedding-launi-me"
compatibility_date = "2024-08-06"
pages_build_output_dir = "./dist"
compatibility_flags = ["nodejs_compat"]


# Automatically place your workloads in an optimal location to minimize latency.
# If you are running back-end logic in a Pages Function, running it closer to your back-end infrastructure
# rather than the end user may result in better performance.
# Docs: https://developers.cloudflare.com/pages/functions/smart-placement/#smart-placement
[placement]
mode = "smart"


# Bind the Workers AI model catalog. Run machine learning models, powered by serverless GPUs, on Cloudflareâ€™s global network
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#workers-ai
# [ai]
# binding = "AI"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"
# script_name = 'my-durable-object'

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#kv-namespaces
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#queue-producers
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#r2-buckets
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#service-bindings
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# To use different bindings for preview and production environments, follow the examples below.
# When using environment-specific overrides for bindings, ALL bindings must be specified on a per-environment basis.
# Docs: https://developers.cloudflare.com/pages/functions/wrangler-configuration#environment-specific-overrides

######## PREVIEW environment config ########

[env.preview.vars]
BUN_VERSION = "1.1.24"
ENVIRONMENT = "preview"
UPLOADTHING_APP_ID = "0lvautmi1u"
AXIOM_DATASET = 'wedding-launi-me-dev'

[[env.preview.d1_databases]]
binding = "WEDDING_DB"
database_name = "wedding-launi-me-preview"
database_id = "1b6c65fc-3b2d-40d4-afb2-afa5943ba801"


[[env.preview.services]]
binding = "axiom"
service = "axiom"
entrypoint = "axiom"


######## PRODUCTION environment config ########
[env.production.vars]
BUN_VERSION = "1.1.24"
ENVIRONMENT = "production"
UPLOADTHING_APP_ID = "f5zzoaqheq"

[[env.production.d1_databases]]
binding = "WEDDING_DB"
database_name = "wedding-launi-me-production"
database_id = "77b33bc0-b9a1-47f3-a7a9-2117d3eeba7c"

[[d1_databases]]
binding = "WEDDING_DB"
database_name = "wedding-launi-me-production"
database_id = "77b33bc0-b9a1-47f3-a7a9-2117d3eeba7c"
